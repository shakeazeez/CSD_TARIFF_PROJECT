name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Test Backend
      run: |
        cd backend/tariffCalc
        mvn test
        cd ../user
        mvn test

    - name: Set up Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Test Frontend
      run: |
        cd frontend/tarrif-project
        npm install
        npm test

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to AWS EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.SSH_HOST }}
        username: ${{ secrets.SSH_USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          source ~/.bashrc

          # Set environment variables from secrets
          export DB_USERNAME="${{ secrets.DB_USERNAME }}"
          export POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          export MOACH_API_KEY="${{ secrets.MOACH_API_KEY }}"
          export SIGNING_SECRET="${{ secrets.SIGNING_SECRET }}"
          export FRONTEND_URL="${{ secrets.FRONTEND_URL }}"
          export VITE_BACKEND_URL="${{ secrets.VITE_BACKEND_URL }}"

          cd ~/Projects/CSD_TARIFF_PROJECT

          git pull origin main

          # Create backup of current docker-compose.yml
          cp docker-compose.yml docker-compose.backup

          # Clean up Docker system
          docker system prune -f
          # Note: Keeping postgres_data volume intact to preserve database
          docker container prune -f

          # Stop current containers
          docker-compose down

          # Start new deployment
          if docker-compose up -d; then

            # Wait a bit for containers to start
            sleep 30

            # Check if containers are running
            if docker-compose ps | grep -q "Up"; then

              # Clean up old images
              docker image prune -f

            else
              docker-compose logs
              exit 1
            fi
          else
            # Restore backup and restart
            cp docker-compose.backup docker-compose.yml
            docker-compose up -d
            exit 1
          fi